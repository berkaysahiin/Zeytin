#include <fstream>
#include <iostream>
#include <sstream>

#include "json_util/parse_json.h"

#include "rapidjson/stringbuffer.h"
#include "rapidjson/writer.h"

namespace util
{
    rapidjson::Document get_as_document(const std::string& path_to_json) {
        std::ifstream json(path_to_json);

        if (!json.is_open()) {
            std::cerr << "Failed to open json: " << path_to_json << "." << std::endl;
            std::cerr << "Error: " << strerror(errno) << std::endl; 
            exit(1); 
        }

        std::stringstream buffer;
        buffer << json.rdbuf();

        if(buffer.fail()) {
            std::cerr << "Failed to load json into buffer: " << path_to_json << "." << std::endl;
            std::cerr << "Error: " << strerror(errno) << std::endl; 
            exit(1);
        }

        const std::string& json_string = buffer.str();

        json.close();

        if(json.is_open()) {
            std::cerr << "Failed to close json file: " << path_to_json << "." << std::endl;
        }

        rapidjson::Document document;
        document.Parse(json_string.c_str());
        return document;
    }

    const std::string value_as_string(const rapidjson::Value& value) {
        rapidjson::StringBuffer buffer;
        rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
        value.Accept(writer);
        return buffer.GetString();
    }
}
